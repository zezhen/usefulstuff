Spell Checker
--
### Overview

Write a program that reads a large list of English words (e.g. from /usr/share/dict/words on a unix system) into memory, and then reads words from stdin, and prints either the best spelling suggestion, or "NO SUGGESTION" if no suggestion can be found. The program should print ">" as a prompt before reading each word, and should loop until killed.

Solution should be faster than O(n) per word checked, where n is the length of the dictionary. That is to say, you can't scan the dictionary every time you want to spellcheck a word.

### Examples

For example:

	> sheeeeep
	sheep
	> peepple
	people
	> sheeple
	NO SUGGESTION

###  Spec

The class of spelling mistakes to be corrected is as follows:

Case (upper/lower) errors: "inSIDE" => "inside" Repeated letters: "jjoobbb" => "job" Incorrect vowels: "weke" => "wake" Any combination of the above types of error in a single word should be corrected (e.g. "CUNsperrICY" => "conspiracy").

If there are many possible corrections of an input word, program can choose one in any way you like. It just has to be an English word that is a spelling correction of the input by the above rules.

Final step: Write a second program that generates words with spelling mistakes of the above form, starting with correctly spelled English words. Pipe its output into the first program and verify that there are no occurrences of "NO SUGGESTION" in the output.


### Implementation

1. **spell_checker.py** loads directory from local file to create *trie* tree, reads alphabet word from standard input and goes through the trie tree with letter exact match and error adjustment (vowels, case, duplication), provide suggested word if it's adjustable.

2. **fuzzy_word_generator.py** generates fuzzy words according to local directory after applying vowels, case and duplication error adjustment; interactive mode allows user to input the word, see the output fuzzy word and the word after spell check.

3. *test_spell_checker.py* unit test of spell_checker.py